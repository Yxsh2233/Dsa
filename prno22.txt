pr22:#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
};

Node* createNode(int data) {
    Node* newNode = new Node();
    newNode->data = data;
    newNode->left = newNode->right = nullptr;
    return newNode;
}

Node* insert(Node* root, int data) {
    if (root == nullptr) return createNode(data);
    if (data < root->data) root->left = insert(root->left, data);
    else if (data > root->data) root->right = insert(root->right, data);
    return root;
}

Node* deleteNode(Node* root, int data) {
    if (root == nullptr) return root;
    if (data < root->data) root->left = deleteNode(root->left, data);
    else if (data > root->data) root->right = deleteNode(root->right, data);
    else {
        if (root->left == nullptr) return root->right;
        else if (root->right == nullptr) return root->left;
        Node* temp = root->right;
        while (temp->left != nullptr) temp = temp->left;
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}

Node* search(Node* root, int data) {
    if (root == nullptr || root->data == data) return root;
    if (data < root->data) return search(root->left, data);
    return search(root->right, data);
}

void display(Node* root) {
    if (root == nullptr) return;
    display(root->left);
    cout << root->data << " ";
    display(root->right);
}

int main() {
    Node* root = nullptr;

    root = insert(root, 50);
    root = insert(root, 30);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 70);
    root = insert(root, 60);
    root = insert(root, 80);

    cout << "Displaying BST: ";
    display(root);
    cout << endl;

    root = deleteNode(root, 20);

    cout << "Displaying BST after deletion: ";
    display(root);
    cout << endl;

    Node* found = search(root, 40);
    if (found != nullptr) cout << "Found: " << found->data << endl;
    else cout << "Not found" << endl;

    return 0;
}